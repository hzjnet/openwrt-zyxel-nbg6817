#!/bin/sh

. /lib/functions.sh

localPath="/tmp/"
localName="RomDConfig"

usage(){
	echo upgrade RomD -- setconfig upgrade_RomD [remote ipaddress] [remote file name] 
	echo erase RomD -- setconfig erase_RomD
}

download_RomD(){
	local remoteIp=$1
	local remoteName=$2
	local chk_download

	[ -z "$remoteIp" ] && {
		echo "need remoteIp"
		exit 1
	}

	[ -z "$remoteName" ] && {
		echo "need remoteName"
		exit 1
	}

	echo download config, please wait!

	chk_download=$(tftp -l $localPath$localName -r $remoteName -g $remoteIp -b 2048)

	if [ -n "$chk_download" ];then
		echo download fail!
		exit 1
	else
		echo download success!
	fi
}

erase_RomD(){
	local base="romd"
        local part="$(grep $base /proc/mtd | awk -F: '{print $1}')"
	mtd erase /dev/$part
}

upgrade_RomD(){

	download_RomD $1 $2

	echo upgrade RomD!

	local filename=$localPath$localName

	local configFile=$filename
	local uploadFile="$filename"Ck
	local base="romd"
	local part="$(grep $base /proc/mtd | awk -F: '{print $1}')"

	ckCgHdr -c -p $configFile -o $uploadFile >> /tmp/logSetconfig_up

	local chk=$(cat /tmp/logSetconfig_up)
	[ -n "$chk" ] && {
		echo $chk
		exit 1
	}

	mtd unlock /dev/$part
	mtd erase /dev/$part
	#mtd write $uploadFile /dev/$part
	local uploadFilelength=$(ls -l "$uploadFile"|awk '{print $5}')
	part="${part##mtd}"		
	mtd_debug write /dev/mtdblock$part 0x0 $uploadFilelength $uploadFile	

	echo "config upload successful"

	##sleep 1	
	##reboot	
}

upload_chkFile(){
	local filename=$1
	local configFile=/tmp/$filename
	local uploadFile=/tmp/"$filename"Ck
	
	sync;sync;sync

	local partname="rootfs_data"
	mtdpart="$(find_mtd_part $partname)"
	[ -z "$mtdpart" ] && {
		chk_size=$(du -h $configFile | awk -F" " '{print $1}' | grep "M")

		#check size :config File size > 3M is fail
		if [ $chk_size ];then
			size=$(echo "$chk_size" |awk -F"M" '{print $1*10}')
			if [ $size -gt 30 ]; then
				#config File size > 3M is fail
				echo "Config file is open error - config old" >> /tmp/logSetconfig_up
				exit 0
			fi
		fi

		ckCgHdr -c -p $configFile -o "$uploadFile"Tmp >> /tmp/logSetconfig_up

		if [ "$(cat /tmp/logSetconfig_up)" == "" ]; then
			openssl aes-256-cbc -d -k 12345678 -in "$uploadFile"Tmp -out $uploadFile
			#check decode is ok or error
			if [ "$?" != "0" ]; then
				echo "Config file is open error - decode error" >> /tmp/logSetconfig_up
			fi
		fi
	} || {
		ckCgHdr -c -p $configFile -o $uploadFile >> /tmp/logSetconfig_up
	}
}

upload_gotoWriteFlash(){
	local filename=$1
	local uploadFile=/tmp/"$filename"Ck

	local partname="rootfs_data"
	mtdpart="$(find_mtd_part $partname)"
	[ -z "$mtdpart" ] && {
		mmc_part="yes"
		mtdpart="$(find_mmc_part $partname)"
		mtdblockpart="$(echo "$mtdpart" | awk '{FS="/"} {print $3}')"
	} || {
		local base="$(echo $filename | cut -f1 -d'.')"
		local part="$(grep $base /proc/mtd | awk -F: '{print $1}')"
		part="${part##mtd}"
		mtdblockpart=mtdblock$part
	}

	zyxel_led_ctrl upgrate

	cp /bin/sleep /tmp
	cp /sbin/reboot /tmp

	umount -l /dev/$mtdblockpart
	umount -l /
	/tmp/sleep 2

	/etc/init.d/dlna stop
	/etc/init.d/samba stop
	killall -9 proftpd
	killall -9 watch
	killall -9 netprobe
	killall -9 zy1905
	killall -9 EmappS

	if [ "$mmc_part" == "yes" ]; then
#		dd if=$uploadFile of=/dev/$mtdblockpart bs=4M count=1
		mkdir -p /tmp/overlayTmp/overlay
		mount /dev/$mtdblockpart /tmp/overlayTmp/overlay

		rm /tmp/overlayTmp/overlay/* -rf
		sync;sync;sync

#		openssl aes-256-cbc -d -k 12345678 -in $uploadFile -out "$uploadFile"Tmp
#		tar -xf	"$uploadFile"Tmp -C /tmp/overlayTmp

		tar -xf	$uploadFile -C /tmp/overlayTmp
		/tmp/sleep 2
		sync;sync;sync

		/tmp/reboot
	else
		mtd unlock /dev/mtd$part
		mtd erase /dev/mtd$part
		mtd -r write $uploadFile /dev/mtd$part
	fi
}

upload(){
	local filename=$1
	local configFile=/tmp/$filename
	local uploadFile=/tmp/"$filename"Ck
	local dencodeFile=/tmp/dencode_$filename
	local base="$(echo $filename | cut -f1 -d'.')"
	local part="$(grep $base /proc/mtd | awk -F: '{print $1}')"
	part="${part##mtd}"	

	sync;sync;sync
	
	ckCgHdr -c -p $configFile -o $uploadFile >> /tmp/logSetconfig_up
	
	local chk_file=$(cat /tmp/logSetconfig_up)

	if [ -z "$chk_file" ]; then

       	cp /bin/sleep /tmp
       	cp /sbin/reboot /tmp

		umount -l /dev/mtdblock$part
		umount -l /
		/tmp/sleep 2

       	/etc/init.d/dlna stop
       	/etc/init.d/samba stop
       	killall -9 proftpd
       	killall -9 watch
       	killall -9 netprobe
       	killall -9 zy1905
       	killall -9 EmappS
       	zyxel_led_ctrl upgrate

       	mtd unlock /dev/mtd$part
       	mtd erase /dev/mtd$part
       	mtd write $uploadFile /dev/mtd$part
       	#flash_eraseall /dev/mtd$part 
       	#nandwrite -mp /dev/mtd$part $uploadFile

       	local uploadFilelength=$(ls -l "$uploadFile"|awk '{print $5}')
       	#mtd_debug write /dev/mtdblock$part 0x0 $uploadFilelength $uploadFile
       	/tmp/sleep 1
       	sync;sync;sync
        /tmp/sleep 1
	fi
}

gotoWriteFlash(){
	sleep 10
	mtd unlock /dev/mtd$1
	mtd erase /dev/mtd$1
	mtd -r write $2 /dev/mtd$1
}

backup(){
	local filename=$1

	local partname="rootfs_data"
	mtdpart="$(find_mtd_part $partname)"
	[ -z "$mtdpart" ] && {
		mmc_part="yes"
		mtdpart="$(find_mmc_part $partname)"
		mtdblockpart="$(echo "$mtdpart" | awk '{FS="/"} {print $3}')"
	} || {
		local base="$(echo $filename | cut -f1 -d'.')"
		local part="$(grep $base /proc/mtd | awk -F: '{print $1}')"
		local size="$(grep $base /proc/mtd | awk '{print $2}')"
		part="${part##mtd}"
		local block=/dev/mtdblock$part
	}

	local host=$(fw_printenv |grep hostname=| awk -F'=' '{print $2}')
	local configFile=/tmp/backup_"$filename"Tmp
	local backupFile=/tmp/backup_$filename
	local encodeFile=/tmp/encode_$filename

	sleep 1
	sync;sync;sync

	if [ "$mmc_part" == "yes" ]; then
#		dd if=/dev/$mtdblockpart of=$configFile bs=4M count=1
		tar -cf "$configFile"Tmp /overlay

		openssl aes-256-cbc -e -k 12345678 -in "$configFile"Tmp -out $configFile

	else
		#mtd_debug read $block 0x0 0x80000 $configFile
		local blockSize="$(grep $base /proc/mtd | awk '{print $3}')"
		mkfs.jffs2 -r /overlay/ -p -x zlib -o $configFile -e 0x$blockSize
	fi

	ckCgHdr -a -n $host -p $configFile -o $backupFile >> /tmp/logSetconfig_bk
	sleep 1
}


cmd=$1
shift
case $cmd in
#	"upload")
#		upload $1
#	;;
	"upload_chkFile")
		upload_chkFile $1
	;;
	"upload_gotoWriteFlash")
		upload_gotoWriteFlash $1
	;;
	"backup")
		backup $1
        ;;
	"upgrade_RomD")
		upgrade_RomD $1 $2
        ;;
	"download_RomD")
		download_RomD $1 $2
        ;;
	"erase_RomD")
		erase_RomD
        ;;
	"-h")
		usage
        ;;
	*)
		echo "Wrong parameter!!"
		usage
		;;
esac
