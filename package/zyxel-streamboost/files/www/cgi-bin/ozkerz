#!/usr/bin/lua

local protocol = require "luci.http.protocol"
local uci = require("luci.model.uci").cursor()

print ("Content-type:application:json\n")
-- print ("hihi")

params = protocol.urldecode_params(os.getenv("QUERY_STRING") or "")

local invalidCommand = false

if params["eventFlows"] then

  -- -----------------------------------------------
  -- validate params:
	if tonumber(params["beginIndex"]) ~= nil and tonumber(params["endIndex"]) ~= nil then
		local handle = io.popen("dump_flow_events_index_json " .. params["beginIndex"] .. " " .. params["endIndex"])
		local result = handle:read("*a")
		handle:close()
		print (result)
	else
		invalidCommand = true
	end

elseif params["preCalculateFlow"] then

  -- -----------------------------------------------
  -- validate params:
	if tonumber(params["timestamp"]) ~= nil then
		local handle = io.popen("dump_flow_precalculateFlow " .. params["timestamp"] ..  " 1 500 1 1")
		local result = handle:read("*a")
		handle:close()
		print (result)
	else
		invalidCommand = true
	end

elseif params["preCalculateFlowShowOnly"] then

  -- -----------------------------------------------
  -- validate params:
	if tonumber(params["timestamp"]) ~= nil then
		local handle = io.popen("dump_flow_precalculateFlow " .. params["timestamp"] ..  " 1 500 2 1")
		local result = handle:read("*a")
		handle:close()
		print (result)
	else
		invalidCommand = true
	end

elseif params["removePrecalculatedAndNodeHistory"] then
	local handle = io.popen("redis-cli DEL eventdb:perDevicePrecalculated nodehistory:nodes")
	local result = handle:read("*a")
	handle:close()
	print (result)
elseif params["dbUsageInfo"] then
	local handle = io.popen("dump_fetchUsageInfo 0 0 0 0")
	local result = handle:read("*a")
	handle:close()
	print (result)
elseif params["writeDBUsageInfo"] then

  -- -----------------------------------------------
  -- validate params:
	if tonumber(params["resetDay"]) ~= nil and tonumber(params["quotaUsage"]) ~= nil and tonumber(params["warningThreshold"]) ~= nil then
		local handle = io.popen("dump_fetchUsageInfo 1 " .. tonumber(params["resetDay"]) .. " " .. tonumber(params["quotaUsage"]) .. " " .. tonumber(params["warningThreshold"]) )
		local result = handle:read("*a")
		handle:close()
		print (result)
	else
		invalidCommand = true
	end
elseif params["perDevice"] then

  -- -----------------------------------------------
  -- validate params:
	if tonumber(params["beginIndex"]) ~= nil and tonumber(params["endIndex"]) ~= nil then
	local handle = io.popen("dump_flow_perDevice_index " .. params["beginIndex"] .. " " .. params["endIndex"])
		local result = handle:read("*a")
		handle:close()
		print (result)
	else
		invalidCommand = true
	end

elseif params["nodeHistory"] then

  -- -----------------------------------------------
  -- validate params:
	if tonumber(params["appendRealtimeData"]) ~= nil then
		local handle = io.popen("dump_fetchNodeHistory ".. params["appendRealtimeData"])
		local result = handle:read("*a")
		handle:close()
		print (result)
	else
		invalidCommand = true
	end

elseif params["lowBoundIndexByTimestamp"] then

  -- -----------------------------------------------
  -- validate params:
	if tonumber(params["timestamp"]) ~= nil then
		local handle = io.popen("redis-cli --eval /bin/fetchNearTimestamp.lua logCalculation " .. params["timestamp"] .. " 500")
		local result = handle:read("*a")
		handle:close()
		print (result)
	else
		invalidCommand = true
	end

elseif params["delPreCalculateFlow"] then
	local handle = io.popen("redis-cli DEL eventdb:perDevicePrecalculated")
	local result = handle:read("*a")
	handle:close()
	print (result)
elseif params["numOfCurrentEventFlows"] then
	local handle = io.popen("dump_flow_numOfIndex")
	local result = handle:read("*a")
	handle:close()
	print (result)
elseif params["retireOzker"] then
	local handle = io.popen("ps | grep '[{]dump_flow_event\\|[{]ozker' | awk '{print $1}' | xargs kill -9")
	local result = handle:read("*a")
	handle:close()
	print (result)
	-- print "{\"message\":\"ok\"}"
	-- print "333"
elseif params["streamboostDebug"] then
	local enableDebug = "0"
	if (params["streamboostDebug"] == "1") then
		enableDebug = "1"
	end
	uci:set("appflow","tccontroller","enable_streamboostDebug", enableDebug)
	uci:commit("appflow")
	print ("{\"message\":\"enableDebug set to " .. enableDebug .. "\"}")
else
	print "{\"message\":\"unknown command\"}"
end -- if params["eventFlows"] then

if invalidCommand then
	print "No such file or directory"
end
