Index: u-boot-2012.07/common/cmd_jffs2.c
===================================================================
--- u-boot-2012.07.orig/common/cmd_jffs2.c	2014-09-18 14:24:26.068679945 +0800
+++ u-boot-2012.07/common/cmd_jffs2.c	2014-09-22 11:46:06.422651357 +0800
@@ -521,7 +521,16 @@
 			size = cramfs_load ((char *) offset, part, filename);
 		} else {
 			/* if this is not cramfs assume jffs2 */
+#ifdef CONFIG_CMD_JFFS2_ULOAD
+            char *tmp;
+            tmp = strrchr(filename, '/')+1;
+            if ( tmp ) {
+                filename = tmp;
+            }
+            size = jffs2_1pass_uload((char *)offset, part, filename);
+#else
 			size = jffs2_1pass_load((char *)offset, part, filename);
+#endif
 		}
 
 		if (size > 0) {
@@ -539,6 +548,7 @@
 	return 1;
 }
 
+#ifdef CONFIG_CMD_JFFS2_LS
 /**
  * Routine implementing u-boot ls command which lists content of a given
  * directory on a current partition.
@@ -576,7 +586,8 @@
 	}
 	return 1;
 }
-
+#endif
+#ifdef CONFIG_CMD_JFFS2_FSINFO
 /**
  * Routine implementing u-boot fsinfo command. This routine prints out
  * miscellaneous filesystem informations/statistics.
@@ -614,7 +625,7 @@
 	}
 	return 1;
 }
-
+#endif
 /***************************************************/
 U_BOOT_CMD(
 	fsload,	3,	0,	do_jffs2_fsload,
@@ -623,15 +634,18 @@
 	"    - load binary file from flash bank\n"
 	"      with offset 'off'"
 );
+#ifdef CONFIG_CMD_JFFS2_LS
 U_BOOT_CMD(
 	ls,	2,	1,	do_jffs2_ls,
 	"list files in a directory (default /)",
 	"[ directory ]"
 );
-
+#endif
+#ifdef CONFIG_CMD_JFFS2_FSINFO
 U_BOOT_CMD(
 	fsinfo,	1,	1,	do_jffs2_fsinfo,
 	"print information about filesystems",
 	""
 );
+#endif
 /***************************************************/
Index: u-boot-2012.07/fs/jffs2/jffs2_1pass.c
===================================================================
--- u-boot-2012.07.orig/fs/jffs2/jffs2_1pass.c	2014-09-18 14:24:26.344679938 +0800
+++ u-boot-2012.07/fs/jffs2/jffs2_1pass.c	2014-09-22 12:10:04.234335371 +0800
@@ -686,6 +686,7 @@
 	return 0;
 }
 
+#ifndef CONFIG_CMD_JFFS2_ULOAD
 /* find the inode from the slashless name given a parent */
 static long
 jffs2_1pass_read_inode(struct b_lists *pL, u32 inode, char *dest)
@@ -810,7 +811,9 @@
 #endif
 	return totalSize;
 }
+#endif
 
+#if !defined(CONFIG_CMD_JFFS2_ULOAD) || defined(CONFIG_CMD_JFFS2_LS)
 /* find the inode from the slashless name given a parent */
 static u32
 jffs2_1pass_find_inode(struct b_lists * pL, const char *name, u32 pino)
@@ -860,6 +863,7 @@
 	}
 	return inode;
 }
+#endif
 
 char *mkmodestr(unsigned long mode, char *str)
 {
@@ -942,6 +946,7 @@
 	return 0;
 }
 
+#ifdef CONFIG_CMD_JFFS2_LS
 /* list inodes with the given pino */
 static u32
 jffs2_1pass_list_inodes(struct b_lists * pL, u32 pino)
@@ -984,7 +989,9 @@
 	}
 	return pino;
 }
+#endif
 
+#ifndef CONFIG_CMD_JFFS2_ULOAD
 static u32
 jffs2_1pass_search_inode(struct b_lists * pL, const char *fname, u32 pino)
 {
@@ -1116,7 +1123,9 @@
 
 	return jffs2_1pass_search_inode(pL, tmp, pino);
 }
+#endif
 
+#ifdef CONFIG_CMD_JFFS2_LS
 static u32
 jffs2_1pass_search_list_inodes(struct b_lists * pL, const char *fname, u32 pino)
 {
@@ -1164,6 +1173,7 @@
 	return pino;
 
 }
+#endif
 
 unsigned char
 jffs2_1pass_rescan_needed(struct part_info *part)
@@ -1433,6 +1443,7 @@
 		return DEFAULT_EMPTY_SCAN_SIZE;
 }
 
+#if !defined(CONFIG_CMD_JFFS2_ULOAD) || defined(CONFIG_CMD_JFFS2_LS) || defined(CONFIG_CMD_JFFS2_FSINFO)
 static u32
 jffs2_1pass_build_lists(struct part_info * part)
 {
@@ -1570,8 +1581,9 @@
 
 			if (*(uint32_t *)(&buf[ofs-buf_ofs]) == 0xffffffff) {
 				uint32_t inbuf_ofs;
-				uint32_t scan_end;
+				uint32_t empty_start, scan_end;
 
+				empty_start = ofs;
 				ofs += 4;
 				scan_end = min_t(uint32_t, EMPTY_SCAN_SIZE(
 							part->sector_size)/8,
@@ -1731,8 +1743,9 @@
 	led_blink(0x0, 0x0, 0x1, 0x1);	/* off, forever, on 100ms, off 100ms */
 	return 1;
 }
+#endif
 
-
+#ifdef CONFIG_CMD_JFFS2_FSINFO
 static u32
 jffs2_1pass_fill_info(struct b_lists * pL, struct b_jffs2_info * piL)
 {
@@ -1760,8 +1773,9 @@
 	}
 	return 0;
 }
+#endif
 
-
+#if !defined(CONFIG_CMD_JFFS2_ULOAD) || defined(CONFIG_CMD_JFFS2_LS) || defined(CONFIG_CMD_JFFS2_FSINFO)
 static struct b_lists *
 jffs2_get_list(struct part_info * part, const char *who)
 {
@@ -1776,9 +1790,10 @@
 	}
 	return (struct b_lists *)part->jffs2_priv;
 }
-
+#endif
 
 /* Print directory / file contents */
+#ifdef CONFIG_CMD_JFFS2_LS
 u32
 jffs2_1pass_ls(struct part_info * part, const char *fname)
 {
@@ -1802,8 +1817,550 @@
 
 	return ret;
 }
+#endif
+#ifdef CONFIG_CMD_JFFS2_ULOAD
+#if 0 // old version, reference Mindspeed SDK v7.1
+static u32
+jffs2_scan_empty(u32 start_offset, struct part_info *part)
+{
+	char *max = (char *)(part->offset + part->size - sizeof(struct jffs2_raw_inode));
+	char *offset = (char *)(part->offset + start_offset);
+	u32 off;
+
+	while (offset < max &&
+	       *(u32*)get_fl_mem((u32)offset, sizeof(u32), &off) == 0xFFFFFFFF) {
+		offset += sizeof(u32);
+		/* return if spinning is due */
+		if (((u32)offset & ((1 << SPIN_BLKSIZE)-1)) == 0) break;
+	}
+
+	return (u32)offset - part->offset;
+}
+
+/* This function search for kernel image in /boot/<fname>. */
+static u32 uimage_size = 0;
+static u32
+jffs2_1pass_scan_kernel(struct part_info * part, const char *fname)
+{
+    struct b_lists *pL;
+    struct jffs2_unknown_node *node;
+    u32 offset, oldoffset = 0;
+    u32 max = part->size - sizeof(struct jffs2_raw_inode);
+    u32 counter = 0;
+    u32 counter4 = 0;
+    u32 counterF = 0;
+    u32 counterN = 0;
+    u32 boot_inode = 0;
+    u32 boot_version = 0;
+    u32 len = 0;
+    u32 pino = 1;
+    u32 uimage_inode = 0;
+    u32 uimage_version = 0;
+
+    int ctotsize = 0;
+    int dtotsize = 0;
+
+    struct jffs2_raw_dirent *jDir;
+    struct jffs2_raw_inode *jNode;
+
+    struct mtdids *id = current_part->dev->id;
+
+    /* copy requested part_info struct pointer to global location */
+    current_part = part;
+
+    /* if we are building a list we need to refresh the cache. */
+    jffs2_1pass_rescan_needed(part);
+    jffs_init_1pass_list(part);
+    pL = (struct b_lists *)part->jffs2_priv;
+    offset = 0;
+    len = strlen("boot");
+	printf("max=%08X\n", max);
+    puts ("Scanning JFFS2 FS:   ");
+
+    /* start at the beginning of the partition */
+    while (offset < max) {
+        node = (struct jffs2_unknown_node *) get_node_mem((u32)part->offset + offset, NULL);
+        if (node && node->magic == JFFS2_MAGIC_BITMASK && hdr_crc(node)) {
+            /* if its a fragment add it */
+            if (node->nodetype == JFFS2_NODETYPE_INODE &&
+                    inode_crc((struct jffs2_raw_inode *) node) &&
+                    data_crc((struct jffs2_raw_inode *) node) ) {
+                jNode = (struct jffs2_raw_inode *) node;
+                if(uimage_inode == jNode->ino)
+                {
+                    if (insert_node(&pL->frag, (u32) part->offset + offset) == NULL) {
+                        put_fl_mem(node, NULL);
+                        return 0;
+                    }
+                    uimage_size = jNode->isize;
+                    //ctotsize += jNode->csize;
+                    dtotsize += jNode->dsize;
+                }
+            } else if (node->nodetype == JFFS2_NODETYPE_DIRENT &&
+                    dirent_crc((struct jffs2_raw_dirent *) node)  &&
+                    dirent_name_crc((struct jffs2_raw_dirent *) node)) {
+                jDir = (struct jffs2_raw_dirent *)node;
+                if ((pino == jDir->pino) && (len == jDir->nsize) &&
+                        (jDir->ino) &&  /* 0 for unlink */
+                        (!strncmp((char *)jDir->name, "boot", len))) {    /* a match for directory 'boot'*/
+                    if (jDir->version < boot_version) {
+                        put_fl_mem(jDir, NULL);
+                        continue;
+                    }
+                    boot_inode = jDir->ino;
+                    boot_version = jDir->version;
+                }
+                if (boot_inode && (boot_inode == jDir->pino) &&
+                        (jDir->ino) &&  /* 0 for unlink */
+                        (!strncmp((char *)jDir->name, fname, strlen(fname)))) {    /* a match for directory entry 'uImage'*/
+                    if (jDir->version < uimage_version) {
+                        put_fl_mem(jDir, NULL);
+                        continue;
+                    }
+                    uimage_inode = jDir->ino;
+                    uimage_version = jDir->version;
+                    printf("...%s Found ya\n", fname);
+                }
+
+            } else if (node->nodetype == JFFS2_NODETYPE_CLEANMARKER) {
+                if (node->totlen != sizeof(struct jffs2_unknown_node))
+                    printf("OOPS Cleanmarker has bad size "
+                        "%d != %d\n", node->totlen,
+                        sizeof(struct jffs2_unknown_node));
+            } else if (node->nodetype == JFFS2_NODETYPE_PADDING) {
+                if (node->totlen < sizeof(struct jffs2_unknown_node))
+                    printf("OOPS Padding has bad size "
+                        "%d < %d\n", node->totlen,
+                        sizeof(struct jffs2_unknown_node));
+            } else {
+                printf("Unknown node type: %x len %d "
+                    "offset 0x%x\n", node->nodetype,
+                    node->totlen, offset);
+            }
+            offset += ((node->totlen + 3) & ~3);
+            counterF++;
+        } else if (node && node->magic == JFFS2_EMPTY_BITMASK &&
+               node->nodetype == JFFS2_EMPTY_BITMASK) {
+            offset = jffs2_scan_empty(offset, part);
+        } else {    /* if we know nothing, we just step and look. */
+            offset += 4;
+            counter4++;
+        }
+/*      printf("unknown node magic %4.4x %4.4x @ %lx\n", node->magic, node->nodetype, (unsigned long)node); */
+        put_fl_mem(node, NULL);
+        if(dtotsize && uimage_size && (dtotsize == uimage_size))
+        {
+              //printf("ctotsize = %d dtotsize = %d uimage_size = %d\n uImage Read Done\n",ctotsize,dtotsize,uimage_size);
+              printf("...%s Read  Done\n", fname);
+              return 1;
+        }
+    }
+
+    printf(".../boot/%s Not Found\n", fname);
+
+    return 0;
+}
+#else
+/* This function search for kernel image in /boot/<fname>. */
+static u32 uimage_size = 0;
+static u32
+jffs2_1pass_scan_kernel(struct part_info * part, const char *fname)
+{
+	struct b_lists *pL;
+	struct jffs2_unknown_node *node;
+	u32 nr_sectors = part->size/part->sector_size;
+	u32 i;
+	u32 max_totlen = 0;
+	u32 buf_size = DEFAULT_EMPTY_SCAN_SIZE;
+	char *buf;
+	
+	u32 len = 0;
+    u32 pino = 1;
+    u32 boot_inode = 0;
+    u32 boot_version = 0;
+    u32 uimage_inode = 0;
+    u32 uimage_version = 0;
+    int dtotsize = 0;
+    struct jffs2_raw_dirent *jDir;
+    struct jffs2_raw_inode *jNode;
+
+    /* copy requested part_info struct pointer to global location */
+    current_part = part;
+
+	/* if we are building a list we need to refresh the cache. */
+	jffs2_1pass_rescan_needed(part);
+	jffs_init_1pass_list(part);
+	pL = (struct b_lists *)part->jffs2_priv;
+	buf = malloc(buf_size);
+	len = strlen("boot");
+	puts ("Scanning JFFS2 FS: ");
+
+	/* start at the beginning of the partition */
+	for (i = 0; i < nr_sectors; i++) {
+		uint32_t sector_ofs = i * part->sector_size;
+		uint32_t buf_ofs = sector_ofs;
+		uint32_t buf_len;
+		uint32_t ofs, prevofs;
+#ifdef CONFIG_JFFS2_SUMMARY
+		struct jffs2_sum_marker *sm;
+		void *sumptr = NULL;
+		uint32_t sumlen;
+		int ret;
+#endif
+
+		WATCHDOG_RESET();
+
+#ifdef CONFIG_JFFS2_SUMMARY
+		buf_len = sizeof(*sm);
+
+		/* Read as much as we want into the _end_ of the preallocated
+		 * buffer
+		 */
+		get_fl_mem(part->offset + sector_ofs + part->sector_size -
+				buf_len, buf_len, buf + buf_size - buf_len);
+
+		sm = (void *)buf + buf_size - sizeof(*sm);
+		if (sm->magic == JFFS2_SUM_MAGIC) {
+			sumlen = part->sector_size - sm->offset;
+			sumptr = buf + buf_size - sumlen;
+
+			/* Now, make sure the summary itself is available */
+			if (sumlen > buf_size) {
+				/* Need to kmalloc for this. */
+				sumptr = malloc(sumlen);
+				if (!sumptr) {
+					putstr("Can't get memory for summary "
+							"node!\n");
+					free(buf);
+					jffs2_free_cache(part);
+					return 0;
+				}
+				memcpy(sumptr + sumlen - buf_len, buf +
+						buf_size - buf_len, buf_len);
+			}
+			if (buf_len < sumlen) {
+				/* Need to read more so that the entire summary
+				 * node is present
+				 */
+				get_fl_mem(part->offset + sector_ofs +
+						part->sector_size - sumlen,
+						sumlen - buf_len, sumptr);
+			}
+		}
 
+		if (sumptr) {
+			ret = jffs2_sum_scan_sumnode(part, sector_ofs, sumptr,
+					sumlen, pL);
 
+			if (buf_size && sumlen > buf_size)
+				free(sumptr);
+			if (ret < 0) {
+				free(buf);
+				jffs2_free_cache(part);
+				return 0;
+			}
+			if (ret)
+				continue;
+
+		}
+#endif /* CONFIG_JFFS2_SUMMARY */
+
+		buf_len = EMPTY_SCAN_SIZE(part->sector_size);
+
+		get_fl_mem((u32)part->offset + buf_ofs, buf_len, buf);
+
+		/* We temporarily use 'ofs' as a pointer into the buffer/jeb */
+		ofs = 0;
+
+		/* Scan only 4KiB of 0xFF before declaring it's empty */
+		while (ofs < EMPTY_SCAN_SIZE(part->sector_size) &&
+				*(uint32_t *)(&buf[ofs]) == 0xFFFFFFFF)
+			ofs += 4;
+
+		if (ofs == EMPTY_SCAN_SIZE(part->sector_size))
+			continue;
+
+		ofs += sector_ofs;
+		prevofs = ofs - 1;
+
+	scan_more:
+		while (ofs < sector_ofs + part->sector_size) {
+			if (ofs == prevofs) {
+				printf("offset %08x already seen, skip\n", ofs);
+				ofs += 4;
+				continue;
+			}
+			prevofs = ofs;
+			if (sector_ofs + part->sector_size <
+					ofs + sizeof(*node))
+				break;
+			if (buf_ofs + buf_len < ofs + sizeof(*node)) {
+				buf_len = min_t(uint32_t, buf_size, sector_ofs
+						+ part->sector_size - ofs);
+				get_fl_mem((u32)part->offset + ofs, buf_len,
+					   buf);
+				buf_ofs = ofs;
+			}
+
+			node = (struct jffs2_unknown_node *)&buf[ofs-buf_ofs];
+
+			if (*(uint32_t *)(&buf[ofs-buf_ofs]) == 0xffffffff) {
+				uint32_t inbuf_ofs;
+				uint32_t empty_start, scan_end;
+
+				empty_start = ofs;
+				ofs += 4;
+				scan_end = min_t(uint32_t, EMPTY_SCAN_SIZE(
+							part->sector_size)/8,
+							buf_len);
+			more_empty:
+				inbuf_ofs = ofs - buf_ofs;
+				while (inbuf_ofs < scan_end) {
+					if (*(uint32_t *)(&buf[inbuf_ofs]) !=
+							0xffffffff)
+						goto scan_more;
+
+					inbuf_ofs += 4;
+					ofs += 4;
+				}
+				/* Ran off end. */
+
+				/* See how much more there is to read in this
+				 * eraseblock...
+				 */
+				buf_len = min_t(uint32_t, buf_size,
+						sector_ofs +
+						part->sector_size - ofs);
+				if (!buf_len) {
+					/* No more to read. Break out of main
+					 * loop without marking this range of
+					 * empty space as dirty (because it's
+					 * not)
+					 */
+					break;
+				}
+				scan_end = buf_len;
+				get_fl_mem((u32)part->offset + ofs, buf_len,
+					   buf);
+				buf_ofs = ofs;
+				goto more_empty;
+			}
+			if (node->magic != JFFS2_MAGIC_BITMASK ||
+					!hdr_crc(node)) {
+				ofs += 4;
+				continue;
+			}
+			if (ofs + node->totlen >
+					sector_ofs + part->sector_size) {
+				ofs += 4;
+				continue;
+			}
+			/* if its a fragment add it */
+			switch (node->nodetype) {
+			case JFFS2_NODETYPE_INODE:
+				if (buf_ofs + buf_len < ofs + sizeof(struct
+							jffs2_raw_inode)) {
+					get_fl_mem((u32)part->offset + ofs,
+						   buf_len, buf);
+					buf_ofs = ofs;
+					node = (void *)buf;
+				}
+				if (!inode_crc((struct jffs2_raw_inode *) node))
+				       break;
+
+				jNode = (struct jffs2_raw_inode *) node;
+				if (uimage_inode == jNode->ino) {
+					if (insert_node(&pL->frag, (u32) part->offset +
+							ofs) == NULL) {
+						free(buf);
+						jffs2_free_cache(part);
+						return 0;
+					}
+                    uimage_size = jNode->isize;
+                    dtotsize += jNode->dsize;
+					if (max_totlen < node->totlen)
+						max_totlen = node->totlen;
+				}
+				break;
+			case JFFS2_NODETYPE_DIRENT:
+				if (buf_ofs + buf_len < ofs + sizeof(struct
+							jffs2_raw_dirent) +
+							((struct
+							 jffs2_raw_dirent *)
+							node)->nsize) {
+					get_fl_mem((u32)part->offset + ofs,
+						   buf_len, buf);
+					buf_ofs = ofs;
+					node = (void *)buf;
+				}
+
+				if (!dirent_crc((struct jffs2_raw_dirent *)
+							node) ||
+						!dirent_name_crc(
+							(struct
+							 jffs2_raw_dirent *)
+							node))
+					break;
+				jDir = (struct jffs2_raw_dirent *)node;
+                if ((pino == jDir->pino) && (len == jDir->nsize) &&
+                        (jDir->ino) &&  /* 0 for unlink */
+                        (!strncmp((char *)jDir->name, "boot", len))) {    /* a match for directory 'boot'*/
+                    if (jDir->version < boot_version) {
+                        //put_fl_mem(jDir, NULL);
+                        continue;
+                    }
+                    boot_inode = jDir->ino;
+                    boot_version = jDir->version;
+                }
+                if (boot_inode && (boot_inode == jDir->pino) &&
+                        (jDir->ino) &&  /* 0 for unlink */
+                        (!strncmp((char *)jDir->name, fname, strlen(fname)))) {    /* a match for directory entry 'uImage'*/
+                    if (jDir->version < uimage_version) {
+                        //put_fl_mem(jDir, NULL);
+                        continue;
+                    }
+                    uimage_inode = jDir->ino;
+                    uimage_version = jDir->version;
+                    printf("'/boot/%s' found", fname);
+                }				
+				break;
+			case JFFS2_NODETYPE_CLEANMARKER:
+				if (node->totlen != sizeof(struct jffs2_unknown_node))
+					printf("OOPS Cleanmarker has bad size "
+						"%d != %zu\n",
+						node->totlen,
+						sizeof(struct jffs2_unknown_node));
+				break;
+			case JFFS2_NODETYPE_PADDING:
+				if (node->totlen < sizeof(struct jffs2_unknown_node))
+					printf("OOPS Padding has bad size "
+						"%d < %zu\n",
+						node->totlen,
+						sizeof(struct jffs2_unknown_node));
+				break;
+			case JFFS2_NODETYPE_SUMMARY:
+				break;
+			default:
+				printf("Unknown node type: %x len %d offset 0x%x\n",
+					node->nodetype,
+					node->totlen, ofs);
+			}
+			ofs += ((node->totlen + 3) & ~3);
+		}
+        if(dtotsize && uimage_size && (dtotsize == uimage_size)) {
+            //printf("ctotsize = %d dtotsize = %d uimage_size = %d\n uImage Read Done\n",ctotsize,dtotsize,uimage_size);
+            puts(", done\n");
+
+            /* We don't care if malloc failed - then each read operation will
+             * allocate its own buffer as necessary (NAND) or will read directly
+             * from flash (NOR).
+             */
+            pL->readbuf = malloc(max_totlen);
+            free(buf);
+            return 1;
+        }
+	}
+	
+	puts(", Scanning whole partition done\n");
+	pL->readbuf = malloc(max_totlen);
+	//Fanning.Yang 2014/02/20: Don't return 0 for fail, keep it scanning whole partition
+	//Case 1: There is no bad block in this partition(rootfs),
+	//      : Finding and Scanning uImage by parameter (uimage_size=dtotsize)
+	//Case 2: There is a bad block in this partition(rootfs),
+	//      : You cannot counting dtotsize, coz it might be re-count by skpping bad block. 
+	//      : So you have to scan whole rootfs partition to make sure all jffs2 node which is belong to uImage  has been record in parameter(pL), This way is ordinary way(fsload) from u-boot to scan all rootfs partition.
+	//printf("'/boot/%s' not found\n", fname);
+	free(buf);
+	//return 0;
+	return 1;//return 1 and it already been assigned uimage inode address to pL, then transfer to "jffs2_1pass_load_kernel()" to keeping parsing uImage
+	
+}
+#endif
+static u32
+jffs2_1pass_load_kernel(struct part_info * part, char *dest, long *fileSize)
+{
+    struct jffs2_raw_inode *jNode;
+//    u32 latestVersion = 0;
+    uchar *lDest;
+    uchar *src;
+    long ret;
+    int i=0;
+    struct b_node *b;
+    struct b_lists *pL = (struct b_lists *)part->jffs2_priv;
+    puts("Loading file: ");
+    *fileSize = 0;
+    for (b = pL->frag.listHead; b != NULL; b = b->next) {
+        jNode = (struct jffs2_raw_inode *) get_node_mem(b->offset, pL->readbuf);
+        src = ((uchar *) jNode) + sizeof(struct jffs2_raw_inode);
+        /* ignore data behind latest known EOF */
+        if (jNode->offset > uimage_size) {
+            put_fl_mem(jNode, NULL);
+            continue;
+        }
+        i++;
+        lDest = (uchar *) (dest + jNode->offset);
+        ret = 0;
+        *fileSize += jNode->dsize;
+        switch (jNode->compr) {
+            case JFFS2_COMPR_NONE:
+                ldr_memcpy(lDest, src, jNode->dsize);
+                break;
+            case JFFS2_COMPR_ZERO:
+                for (i = 0; i < jNode->dsize; i++)
+                    *(lDest++) = 0;
+                break;
+            case JFFS2_COMPR_RTIME:
+                rtime_decompress(src, lDest, jNode->csize, jNode->dsize);
+                break;
+            case JFFS2_COMPR_DYNRUBIN:
+                /* this is slow but it works */
+                dynrubin_decompress(src, lDest, jNode->csize, jNode->dsize);
+                break;
+            case JFFS2_COMPR_ZLIB:
+                ret = zlib_decompress(src, lDest, jNode->csize, jNode->dsize);
+                break;
+#if defined(CONFIG_JFFS2_LZO_LZARI)
+            case JFFS2_COMPR_LZO:
+                ret = lzo_decompress(src, lDest, jNode->csize, jNode->dsize);
+                break;
+            case JFFS2_COMPR_LZARI:
+                ret = lzari_decompress(src, lDest, jNode->csize, jNode->dsize);
+                break;
+#endif
+            default:
+                /* unknown */
+                printf("Unkown compression method = 0x%02X\n", (unsigned int)jNode->compr);
+                put_fl_mem(jNode, pL->readbuf);
+                return -1;
+        }
+        put_fl_mem(jNode, pL->readbuf);
+        if ( ret < 0 ) { /* decompress failed */
+            *fileSize = 0;
+            puts("Decompress failed\n");
+            return -2;
+        }
+    }
+    puts("done\n");
+    return 0;
+}
+
+/* Load the kernel file from flash into memory*/
+u32
+jffs2_1pass_uload(char *dest, struct part_info * part, const char *fname)
+{
+    long size;
+    int ret;
+    if (! (jffs2_1pass_scan_kernel(part, fname))) {
+        //puts("scan failed: trying loading using fsload\r\n");
+        return 0;
+    }
+    if ( (ret = jffs2_1pass_load_kernel(part, dest, &size)) ) {
+        puts(", fail to load kernel image!\n");
+        return ret;
+    }
+    return size; /* success */
+}
+#else
 /* Load a file from flash into memory. fname can be a full path */
 u32
 jffs2_1pass_load(char *dest, struct part_info * part, const char *fname)
@@ -1836,7 +2393,9 @@
 				(unsigned long) dest, ret);
 	return ret;
 }
+#endif
 
+#ifdef CONFIG_CMD_JFFS2_FSINFO
 /* Return information about the fs on this partition */
 u32
 jffs2_1pass_info(struct part_info * part)
@@ -1861,3 +2420,4 @@
 	}
 	return 1;
 }
+#endif
Index: u-boot-2012.07/include/jffs2/jffs2.h
===================================================================
--- u-boot-2012.07.orig/include/jffs2/jffs2.h	2014-09-18 14:24:26.612679930 +0800
+++ u-boot-2012.07/include/jffs2/jffs2.h	2014-09-22 13:38:04.262047821 +0800
@@ -215,6 +215,7 @@
 
 u32 jffs2_1pass_ls(struct part_info *part,const char *fname);
 u32 jffs2_1pass_load(char *dest, struct part_info *part,const char *fname);
+u32 jffs2_1pass_uload(char *dest, struct part_info *part, const char *fname);
 u32 jffs2_1pass_info(struct part_info *part);
 
 void rtime_decompress(unsigned char *data_in, unsigned char *cpage_out,
Index: u-boot-2012.07/include/jffs2/jffs2_1pass.h
===================================================================
--- u-boot-2012.07.orig/include/jffs2/jffs2_1pass.h	2014-09-18 14:24:26.612679930 +0800
+++ u-boot-2012.07/include/jffs2/jffs2_1pass.h	2014-09-22 13:38:29.612108155 +0800
@@ -1,3 +1,4 @@
 u32 jffs2_1pass_ls(struct part_info *part,const char *fname);
 u32 jffs2_1pass_load(char *dest, struct part_info *part,const char *fname);
+u32 jffs2_1pass_uload(char *dest, struct part_info *part, const char *fname);
 u32 jffs2_1pass_info(struct part_info *part);
