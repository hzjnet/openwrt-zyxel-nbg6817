#!/bin/sh

. /etc/functions.sh
include /lib/config/

configPATH=/etc/lighttpd/conf.d/port.conf
PX5G_BIN="/usr/sbin/px5g"

filter()
{
	config_load firewall
	config_get www_port remote_www port
	config_get www_inf remote_www interface
	config_get www_client_check remote_www client_check
	config_get www_client_addr remote_www client_addr

	if [ "on" = "$1" ]; then
		filter_type=" -I "
	else
		filter_type=" -D "
	fi
		
		#no access
		echo disable www
		
		inf_cmd=""
		# insert DROP rule first 
		case $www_inf in
			0)
			#disable
			if [ "$www_client_check" = "0" ]; then
				exit 0
			fi
			;;
			2)
			#lan
			if [ "$www_client_check" = "0" ]; then
				inf_cmd=" ! -i br-lan "
			fi
			;;
			3)
			#wan
			if [ "$www_client_check" = "0" ]; then
				inf_cmd=" -i br-lan "
			fi
			;;
		esac
		if [ $www_inf -ne 1 -o $www_client_check -ne 0 ]; then
			/usr/sbin/iptables -t filter $filter_type RMMG_WWW_INPUT $inf_cmd -p tcp --dport $www_port -j DROP 2> /dev/null
		fi
		
		case $www_inf in
			1)
			# lan and wan
			inf_cmd=""
			;;
			2)
			#lan
			inf_cmd=" -i br-lan "
			;;
			3)
			#wan
			inf_cmd=" ! -i br-lan "
			;;
		esac

		if [ "$www_client_check" = "0" ]; then
			addr_cmd=""
		else
			addr_cmd=" -s $www_client_addr "
		fi

		
		/usr/sbin/iptables -t filter $filter_type RMMG_WWW_INPUT $inf_cmd $addr_cmd -p tcp --dport $www_port -j ACCEPT 2> /dev/null
		
}
#For Https Here#
filterHttps()
{
	config_load firewall
	config_get www_port remote_https port
	config_get www_inf remote_https interface
	config_get www_client_check remote_https client_check
	config_get www_client_addr remote_https client_addr

	if [ "on" = "$1" ]; then
		filter_type=" -I "
	else
		filter_type=" -D "
	fi
		inf_cmd=""
		# insert DROP rule first 
		case $www_inf in
			0)
			#disable
			if [ "$www_client_check" = "0" ]; then
				exit 0
			fi
			;;
			2)
			#lan
			if [ "$www_client_check" = "0" ]; then
		          inf_cmd=" ! -i br-lan"
			fi
			;;
			3)
			#wan
			if [ "$www_client_check" = "0" ]; then
			  inf_cmd=" -i br-lan"
			fi
			;;
		esac
		if [ $www_inf -ne 1 -o $www_client_check -ne 0 ]; then
			/usr/sbin/iptables -t filter $filter_type RMMG_WWW_INPUT $inf_cmd -p tcp --dport $www_port -j DROP 2> /dev/null
		fi
		
		case $www_inf in
			1)
			# lan and wan
			inf_cmd=""
			;;
			2)
			#lan
			inf_cmd=" -i br-lan"
			;;
			3)
			#wan
			inf_cmd=" ! -i br-lan"
			;;
		esac

		if [ "$www_client_check" = "0" ]; then
			addr_cmd=""
		else
			addr_cmd=" -s $www_client_addr "
		fi
		
		/usr/sbin/iptables -t filter $filter_type RMMG_WWW_INPUT $inf_cmd $addr_cmd -p tcp --dport $www_port -j ACCEPT 2> /dev/null
}

setConfig(){
	http_port=$(uci_get uhttpd main listen_http)
	https_port=$(uci get uhttpd.main.listen_https)

	if [ "$http_port" == "" ]; then
		http_port=80
	fi

	echo "server.port = $http_port" > $configPATH

	if [ "$https_port" != "" ]; then
		echo '$SERVER["socket"] == "'":$https_port"'" {' >> $configPATH
		echo '	ssl.engine = "enable"' >> $configPATH
		echo '	ssl.pemfile = "/tmp/lighttpd.pem"' >> $configPATH
		echo '}' >> $configPATH
	fi
	chk_lan_ip
}

chk_lan_ip(){
	local lan_ip=$(uci get network.lan.ipaddr | awk -F '.' '{print $1"."$2"."$3}')
	sed -e "s#|LANIP|#"$lan_ip.0/24"#g"\
		/etc/lighttpd/conf.d/photobak.conf.default > /etc/lighttpd/conf.d/photobak.conf

	sed -e "s#|LANIP|#"$lan_ip.0/24"#g"\
		/etc/lighttpd/conf.d/webdav.conf.default > /etc/lighttpd/conf.d/webdav.conf 
}

generate_keys() {
	days=$(uci get uhttpd.px5g.days)
	bits=$(uci get uhttpd.px5g.bits)
	country=$(uci get uhttpd.px5g.country)
	state=$(uci get uhttpd.px5g.state)
	location=$(uci get uhttpd.px5g.location)
	commonname=$(uci get uhttpd.px5g.commonname)

	openssl req -new -nodes -sha256 -x509 -newkey rsa:${bits:-1024} -keyout "/tmp/lighttpd.pem" -out "/tmp/lighttpd.pem" -days ${days:-730} \
		-subj /C="${country:-DE}"/ST="${state:-Saxony}"/L="${location:-Leipzig}"/CN="${commonname:-OpenWrt}"

#	[ -x "$PX5G_BIN" ] && {
#		$PX5G_BIN selfsigned -der \
#			-days ${days:-730} -newkey rsa:${bits:-1024} -keyout "/tmp/lighttpd.pem" -out "/tmp/lighttpd.pem" \
#			-subj /C="${country:-DE}"/ST="${state:-Saxony}"/L="${location:-Leipzig}"/CN="${commonname:-OpenWrt}"
#	}
}

chk_remote_management(){
	pwd=$(uci get system.main.pwd)

	if [ "$pwd" == "1234" ]; then # default password
		uci set firewall.remote_www.interface="2"
		uci set firewall.remote_https.interface="2"
		uci commit firewall
	fi
}

lighttpd_init(){
	chk_remote_management
	config_load firewall
	config_get remote_http remote_www port
	http_port=$(uci_get uhttpd main listen_http)
	
	## uhttpd is reloaded if and only if listen port is changed
	if [ -n "$remote_http" ] && [ $http_port -ne $remote_http ] ; then
		uci set uhttpd.main.listen_http=$remote_http
		uci commit uhttpd
		sync #This command is for emmc and ext4 filesystem
	fi
	
	config_get remote_https remote_https port
	https_port=$(uci get uhttpd.main.listen_https)
	## uhttpd is reloaded if and only if listen port is changed
	if [ -n "$remote_https" ] && [ "$https_port" != "$remote_https" ] ; then
		uci set uhttpd.main.listen_https=$remote_https
		uci commit uhttpd
		sync #This command is for emmc and ext4 filesystem
	fi

	##check mode,if AP/UR,exit
	local sys_mode=$(get_sys_mode)
	[ "$sys_mode" == "2" -o "$sys_mode" == "3" ] || {
		
		insmod x_tables  2>&- >&-
		insmod ip_tables  2>&- >&-
		insmod ip6_tables  2>&- >&-
		insmod iptable_filter  2>&- >&-
		insmod xt_tcpudp  2>&- >&-
		
		/usr/sbin/iptables -F RMMG_WWW_INPUT
		/usr/sbin/iptables -X RMMG_WWW_INPUT
		/usr/sbin/iptables -N RMMG_WWW_INPUT
		
		filter "on"
		filterHttps "on"
		local changeToSer=$(uci_get nat general changeToSer)
		[ "$changeToSer" = "1" ] && /sbin/nat apply

		#guest wireless LAN
		/lib/firewall/firewall_guest_wlan
	}
	setConfig
	generate_keys
}

lighttpd_off(){
	filter "off"
	filterHttps "off"
}

case $1 in
	init)
		lighttpd_init
	;;
	off)
		lighttpd_off
	;;
	sysStart)
		sysSTART
	;;
esac
